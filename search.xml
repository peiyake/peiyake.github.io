<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试文章</title>
      <link href="/2022/07/14/d050aabdbce5/"/>
      <url>/2022/07/14/d050aabdbce5/</url>
      
        <content type="html"><![CDATA[<p>这是一篇测试文章。</p><p>仅仅为了增加文章数量，然后查看一下“当首页有多篇文章时，<strong>阅读数</strong>能否正常显示”。</p><p>谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过钩子实时获取内核日志</title>
      <link href="/2022/07/13/2f9c86473b67/"/>
      <url>/2022/07/13/2f9c86473b67/</url>
      
        <content type="html"><![CDATA[<p>在Linux运行环境，内核日志对我们排查内核态的故障非常重要，尤其是当内核发生<strong>panic</strong>或者<strong>Oops</strong>故障时，内核会通过日志输出堆栈信息，但是当发生此类问题时，设备往往会重启，重启后日志信息就会丢失，导致无法通过日志来定位问题。尤其是在嵌入式设备上，出现此类问题往往让人头疼。那么有没有什么办法能保存<strong>故障现场的日志</strong>呢？本文提供一种方法：在内核printk代码中添加日志处理<strong>钩子函数</strong>，通过此钩子你可以注册自己的日志接收函数，可以实时的把内核日志保存下来~</p><h3 id="内核版本"><a href="#内核版本" class="headerlink" title="内核版本"></a>内核版本</h3><ul><li>linux-4.4</li></ul><h3 id="代码修改"><a href="#代码修改" class="headerlink" title="代码修改"></a>代码修改</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/include/linux/printk.h b/include/linux/printk.h</span><br><span class="line">index e8aae29..2c1ec29 100644</span><br><span class="line">--- a/include/linux/printk.h</span><br><span class="line">+++ b/include/linux/printk.h</span><br><span class="line">@@ -10,6 +10,9 @@</span><br><span class="line"> extern const char linux_banner[];</span><br><span class="line"> extern const char linux_proc_banner[];</span><br><span class="line"> </span><br><span class="line">+typedef int *printk_hook_t(char *text,size_t textlen);</span><br><span class="line">+extern void printk_hook_register(printk_hook_t *hook);</span><br><span class="line">+extern void printk_hook_unregister(void);</span><br><span class="line"> static inline int printk_get_level(const char *buffer)</span><br><span class="line"> &#123;</span><br><span class="line">        if (buffer[0] == KERN_SOH_ASCII &amp;&amp; buffer[1]) &#123;</span><br><span class="line">diff --git a/kernel/printk/printk.c b/kernel/printk/printk.c</span><br><span class="line">index 82e293a..eb45e81 100644</span><br><span class="line">--- a/kernel/printk/printk.c</span><br><span class="line">+++ b/kernel/printk/printk.c</span><br><span class="line">@@ -62,6 +62,19 @@ int console_printk[4] = &#123;</span><br><span class="line">        CONSOLE_LOGLEVEL_DEFAULT,       /* default_console_loglevel */</span><br><span class="line"> &#125;;</span><br><span class="line"> </span><br><span class="line">+static printk_hook_t __rcu *printk_hook __read_mostly;</span><br><span class="line">+void printk_hook_register(printk_hook_t *hook)</span><br><span class="line">+&#123;</span><br><span class="line">+       rcu_assign_pointer(printk_hook, hook);</span><br><span class="line">+&#125;</span><br><span class="line">+EXPORT_SYMBOL(printk_hook_register);</span><br><span class="line">+void printk_hook_unregister(void)</span><br><span class="line">+&#123;</span><br><span class="line">+       RCU_INIT_POINTER(printk_hook, NULL);</span><br><span class="line">+       synchronize_rcu();</span><br><span class="line">+&#125;</span><br><span class="line">+EXPORT_SYMBOL(printk_hook_unregister);</span><br><span class="line">+</span><br><span class="line"> /*</span><br><span class="line">  * Low level drivers may need that to know if they can schedule in</span><br><span class="line">  * their unblank() callback or not. So let&#x27;s export it.</span><br><span class="line">@@ -1673,6 +1686,15 @@ asmlinkage int vprintk_emit(int facility, int level,</span><br><span class="line">        /* cpu currently holding logbuf_lock in this function */</span><br><span class="line">        static unsigned int logbuf_cpu = UINT_MAX;</span><br><span class="line"> </span><br><span class="line">+       printk_hook_t *pr_hook = rcu_dereference(printk_hook);</span><br><span class="line">+       static bool first_time_pr_hook = true;</span><br><span class="line">+       u64 hook_seq,pre_next_seq;</span><br><span class="line">+       u32 hook_idx,pre_next_idx;</span><br><span class="line">+       struct printk_log *hook_msg;</span><br><span class="line">+       //static char textbuf[LOG_LINE_MAX];</span><br><span class="line">+       size_t len;</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">        if (level == LOGLEVEL_SCHED) &#123;</span><br><span class="line">                level = LOGLEVEL_DEFAULT;</span><br><span class="line">                in_sched = true;</span><br><span class="line">@@ -1707,6 +1729,9 @@ asmlinkage int vprintk_emit(int facility, int level,</span><br><span class="line">        lockdep_off();</span><br><span class="line">        raw_spin_lock(&amp;logbuf_lock);</span><br><span class="line">        logbuf_cpu = this_cpu;</span><br><span class="line">+       </span><br><span class="line">+       pre_next_idx = log_next_idx;</span><br><span class="line">+       pre_next_seq = log_next_seq;</span><br><span class="line"> </span><br><span class="line">        if (unlikely(recursion_bug)) &#123;</span><br><span class="line">                static const char recursion_msg[] =</span><br><span class="line">@@ -1800,6 +1825,28 @@ asmlinkage int vprintk_emit(int facility, int level,</span><br><span class="line">                        printed_len += log_store(facility, level, lflags, 0,</span><br><span class="line">                                                 dict, dictlen, text, text_len);</span><br><span class="line">        &#125;</span><br><span class="line">+       </span><br><span class="line">+       if(pr_hook)&#123;</span><br><span class="line">+               if(first_time_pr_hook || (level == LOGLEVEL_EMERG))&#123;</span><br><span class="line">+                       cont_flush(LOG_NEWLINE);</span><br><span class="line">+               &#125;</span><br><span class="line">+               if(first_time_pr_hook)&#123;</span><br><span class="line">+                       hook_idx = log_first_idx;</span><br><span class="line">+                       hook_seq = log_first_seq;</span><br><span class="line">+                       first_time_pr_hook = false;</span><br><span class="line">+               &#125;else&#123;</span><br><span class="line">+                       hook_idx = pre_next_idx;</span><br><span class="line">+                       hook_seq = pre_next_seq;</span><br><span class="line">+               &#125;</span><br><span class="line">+               </span><br><span class="line">+               for(; hook_seq != log_next_seq;hook_seq ++)&#123;</span><br><span class="line">+                       hook_msg = log_from_idx(hook_idx);</span><br><span class="line">+                       len = sizeof(textbuf);</span><br><span class="line">+                       len = msg_print_text(hook_msg,0,false,textbuf,len);</span><br><span class="line">+                       pr_hook(textbuf,len);</span><br><span class="line">+                       hook_idx = log_next(hook_idx);</span><br><span class="line">+               &#125;</span><br><span class="line">+       &#125;</span><br><span class="line"> </span><br><span class="line">        logbuf_cpu = UINT_MAX;</span><br><span class="line">        raw_spin_unlock(&amp;logbuf_lock);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> printk </tag>
            
            <tag> HOOK </tag>
            
            <tag> blackbox </tag>
            
            <tag> 内核日志 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
